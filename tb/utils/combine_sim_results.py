"""
Combine Results Script

This script combines multiple XML test result files into a single XML file.
It is designed to work with test result files generated by cocotb or similar
testing frameworks that produce XML output in JUnit format.

Usage:
    This script is called from the command line with the file names of
    the XML test result files to combine as arguments:

    $ python combine_results.py file1.xml file2.xml ...

Input:
    The script takes a list of XML files passed as command-line arguments.
    Each file is expected to have a root element containing one or more
    <testsuite> elements.

Output:
    A single file named 'results.xml' is created in the current directory,
    containing all the test suites from the input files.

Error Handling:
    If any input file cannot be parsed, an error message is printed to stderr,
    but the script continues processing other files.

Note:
    This script assumes that each input XML file has a root element containing
    one or more <testsuite> elements. The combined output will have a root
    <testsuites> element containing all the <testsuite> elements from the inputs.
"""

import xml.etree.ElementTree as ET
import sys

def combine_results(files):
    # Create a root element for the combined results
    results = ET.Element('testsuites')

    # Iterate through the XML files passed as arguments
    for file in files:
        try:
            # Parse the XML file
            tree = ET.parse(file)
            root = tree.getroot()

            # Find all 'testsuite' elements, even if they're nested
            for testsuite in root.findall('.//testsuite'):
                # Append each testsuite to the combined results
                results.append(testsuite)
        except ET.ParseError as e:
            # If there's an error parsing the XML, print it to stderr
            print(f'Error parsing {file}: {e}', file=sys.stderr)

    # Write the combined results to 'results.xml'
    ET.ElementTree(results).write('results.xml', encoding='utf-8', xml_declaration=True)
    print('Results combined successfully.')

if __name__ == '__main__':
    # Check if any files were provided as arguments
    if len(sys.argv) < 2:
        print("Usage: python combine_results.py file1.xml file2.xml ...", file=sys.stderr)
        sys.exit(1)

    # Call the combine_results function with the list of files provided as arguments
    combine_results(sys.argv[1:])
